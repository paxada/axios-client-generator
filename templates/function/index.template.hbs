import axios from 'axios';
import urlJoin from 'url-join';
import { 
    {{#if hasBody}} {{{ bodyInterface }}}, {{/if}}
    {{#if hasQuery}} {{{ queryInterface }}}, {{/if}}
    {{#if hasPathParams}} {{{ pathParamsInterface }}}, {{/if}}
    {{{ routeSuccessInterface }}}
} from '{{{ routeInterfaceRelativePath }}}';
import { BaseParams } from '{{{ clientTypeRelativePath }}}';
import { RequestError, RequestSuccess } from '{{{ requestTypeRelativePath }}}';
import { {{{ functionInterfaceName }}} } from './{{{ functionInterfaceRelativePathÂ }}}';

export const {{{ functionName }}} = ({ baseUrl, headers }: BaseParams): {{{ functionInterfaceName }}} => async ({{#ifOr hasBody hasQuery hasPathParams}}params: {
    {{#if hasBody}} body: {{{ bodyInterface }}}; {{/if}}
    {{#if hasQuery}} query: {{{ queryInterface }}}; {{/if}}
    {{#if hasPathParams}} pathParams: {{{ pathParamsInterface }}}; {{/if}}
}{{/ifOr}}): Promise<
    RequestSuccess<{{{ routeSuccessInterface }}}> | RequestError
> => {
    try {
        {{#ifOr hasBody hasQuery hasPathParams}} const { {{#if hasQuery}} query, {{/if}} {{#if hasBody}} body, {{/if}} {{#if hasPathParams}} pathParams {{/if}} } = params {{/ifOr}}
        {{#if hasQuery}} const queryString = query ? `?${new URLSearchParams(query).toString()}` : ''; {{/if}}
        const url = urlJoin(baseUrl, `{{{ routePath }}}`{{#if hasQuery}} , queryString {{/if}});
        const result = await axios.{{{ method }}}<{{{ routeSuccessInterface }}}>(url,{{#if hasBody}} body,{{/if}} { headers });
        return { hasFailed: false, status: result.status, data: result.data };
    } catch (e) {
        return {
            hasFailed: true,
            status: e?.response?.status,
            data: e?.response?.data,
        };
    }
};
